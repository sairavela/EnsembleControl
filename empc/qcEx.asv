clear all;
close all;
%IC
x = [0;0;0;0;0;0;0;0;0;0;0;0];
xg = [0;0;0;0;0;0;0;0;0;0;0;0];
Ts = 0.1;
p = 18;
m = 2;
gprec = 0.01;
nens = 100;
Duration = 10;
hbar = waitbar(0,'Simulation Progress');
xHistory = x';
uk = [4.9; 4.9; 4.9; 4.9;];
nloptions = nlmpcmoveopt;
nloptions.MVTarget = [4.9 4.9 4.9 4.9]; 
uHistory(1,:) = uk';
for k = 1:(Duration/Ts)
    % Set references for previewing
    t = linspace(k*Ts, (k+p-1)*Ts,p);
    %yref = QuadrotorReferenceTrajectory(t);
    % Compute the control moves with reference previewing.
    xk = xHistory(k,:)';
    uHistory(k+1,:) = uk';
    % Ensemble Controller
%     [uens,xens] = EnsSim(xk,uk,nens,Ts);
%         [uensplus] = EnsUpdate(xens,uens,xg,gprec);
% 
%     plot3(xens(1,:)', xens(2,:)',xens(3,:)','.');
%     hold on;
%     plot3(xHistory(:,1),xHistory(:,2),xHistory(:,3),'kx');
%     plot3(xg(1),xg(2),xg(3),'b+');
    %plot3(xout(1),xout(2),xout(3),'ro');
%     hold off; 
%     drawnow;
%     uk = median(uensplus,2);
    vk * [ xv xv yv yv
    uk = [4.6; 5.2; 4.6; 5.2];min(max(uk,0),12);
    % Update states.
    ODEFUN = @(t,xk) QuadrotorStateFcn(xk,uk);
    [TOUT,YOUT] = ode45(ODEFUN,[0 Ts], xHistory(k,:)');
    xHistory(k+1,:) = YOUT(end,:);
    waitbar(k*Ts/Duration,hbar);

    
end
close(hbar);
plotQuadrotorTrajectory;
animateQuadrotorTrajectory